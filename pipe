pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/Night-mask/WEB.git'
        BRANCH_NAME = 'main'
        DOCKER_IMAGE = 'dockerflask:latest'
    }

    stages {
        stage('GIT Checkout') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${REPO_URL}"
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    sh 'echo "Current directory: $(pwd)"'
                    sh 'ls -la'
                }
            }
        }

        stage('Check Python') {
            steps {
                script {
                    sh 'python3 --version'
                }
            }
        }

        stage('Check Docker') {
            steps {
                script {
                    sh 'docker --version'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}", "-f dockerflask .")
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    sh 'docker run -d -it --name flask-app -p 5000:5000 ${DOCKER_IMAGE}'
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    // Apply Kubernetes configuration to deploy the application
                    sh '''
                    kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: ${DOCKER_IMAGE}
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: NodePort
EOF
                    '''
                }
            }
        }

        stage('Get Minikube Service URL') {
            steps {
                script {
                    // Get the URL to access the Flask application running on Minikube
                    sh 'minikube service flask-app-service --url'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}

